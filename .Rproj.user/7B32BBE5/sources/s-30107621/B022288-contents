---
title: "Shiny app tutorial"
author: "Jorge Cimentada"
date: "5/20/2018"
output: html_document
runtime: shiny
---

Shiny apps contain two basic building blocks. First is the user interface (UI) which is the code that generates the website that a user interacts with. Secondly is the server which is an R script that generates the output that will populate the Shiny app.


### UI rules

Let's first define the user interface. The user interace has sliders and html widgets that allow the user to tweak the output for what they want it. So the UI **could** contain sliders and that sliders must control something, so the UI usually has outputs. These are the fundamentals of the UI. For example

```{r}
library(shiny)

ui <- fluidPage(
  sliderInput(inputId = "slid",
              label = "Choose bins",
              min = 20,
              max = 100,
              value = 25),
  plotOutput("hist")
)
```

Notice that sliders don't have to be saved into an R object because they just generate html. Sliders must contain an `inputId` that must have a unique name because the value captured by that slider will usually be used later on by the `server` side. Moreover, the output needs to be shown by a special `*Output` function. There are many of these for plots, tables, text, etc..

**Also note that both expressions need to be separated by a `,`. `fluidPage` doesn't take an expression as an argument but rather a series of expressions which need not be wrapped in `{}` but separated by a comma.**

### Server rules

Servers need to have `input` and `output` arguments. It makes sense: you need to receive something to generate something and then you produce something that you will show in the UI. Input and output objects are reactive, which means that whenever an input is changed, a new output is produced with the new input value. But one very important rule is that reactive elements need be inside special functions. For example, to produce a plot using the slider from before we need to wrap everything in `renderPlot` a function designed to workn with reactivity.

```{r}
server <- function(input, output) {
  output$hist <- renderPlot({
    hist(rnorm(input$slid))
  })
}
```

We can use `input$slid` because it's inside a reactive expression. We render the plot with the new value from the slider using `renderPlot` and then save it as `output$hist`. The UI will now plot `output$hist` using `plotOutput` because it calls `hist`. Note that they must have the same name.

The app looks like this

```{r}

library(shiny)

ui <- fluidPage(
  sliderInput(inputId = "slid",
              label = "Choose bins",
              min = 20,
              max = 100,
              value = 25),
  plotOutput("hist")
)

server <- function(input, output) {
  output$hist <- renderPlot({
    hist(rnorm(input$slid))
  })
}

shinyApp(ui = ui, server = server)
```

#### Overall rules

* Every input needs tobe inside a reactive expression in `server`
* All output needs to be saved to `output$`
* Build outputs with `*render()` objects
* Access input objects with `input$`


### Reactivity

Reactivity works this way:

* An input is changed
* The input notifies all expressions that are using the input that it has changed
* Each expression is recomputed in the order in which it appears.

For example..

```{r}
ui <- fluidPage(
  dateInput("date_input", label = ""),
  textOutput("today_date"),
  plotOutput("hist")
)

server <- function(input, output) {
  
  output$today_date <-
    renderText({
      paste0("Today's date is ", input$date_input, " so the plot's title is")
    })
  
  output$hist <-
    renderPlot(
      hist(rnorm(100), main = input$date_input)
    )
}

shinyApp(ui = ui, server = server)
```

Whenever I change the date, `input$date_input` notifies the text and then the histogram. Both expressions are recomputed, in the order in which they appear. To only use `input$date_input` once (for example, if you had random numbers) you can wrap the input in `reactive`. This way we create an intermediate object once and reuse it for all the inputs. This makes a lot of sense if you're doing some sort of transformation on the input. Use the result of this intermediate object as a function.

```{r}
ui <- fluidPage(
  dateInput("date_input", label = ""),
  textOutput("today_date"),
  plotOutput("hist")
)

server <- function(input, output) {
  
  the_date <- reactive(input$date_input)
  
  output$today_date <-
    renderText({
      paste0("Today's date is ", the_date(), " so the plot's title is")
    })
  
  output$hist <-
    renderPlot(
      hist(rnorm(100), main = the_date())
    )
}

shinyApp(ui = ui, server = server)
```

As a final note on `reactive`, **reactive expressions are computed once and cached for all outputs or other computations once**. So feel free to use across your code.


You can use `isolate()` to make a reactive expression not reactive. For example

```{r}
ui <- fluidPage(
  sliderInput("slid", "Choose numbers",
              min = 20,
              max = 100,
              value = 25),
  textInput("title", label = "Title of plot"),
  plotOutput("scatter")
)

server <- function(input, output) {
  output$scatter <- renderPlot({
    plot(rnorm(input$slid), rnorm(input$slid), main = isolate(input$title))
  })
}

shinyApp(ui = ui, server = server)
```

What `isolate` does is that `input$title` will not recompute the scatter anymore. You can type your title but the plot won't rebuild. It will rebuild when you change the slide, so this gives you time to write your title and avoid the plot from rebuilding every time.



### Events

You can also trigger things to happen using, for example, using an action button and `observeEvent`.

```{r}
ui <- fluidPage(
  numericInput("numid", "Choose a number", value = 0),
  actionButton("button", "Print number!"),
  textOutput("number_is")
)

server <- function(input, output) {
  observeEvent(input$button, handlerExpr = {
    output$number_is <- renderText(paste0("Woho! Number is ", isolate(input$numid)))
  })
}

shinyApp(ui = ui, server = server)
```


Whenever you click the action button, `observeEvent` is paying attention and executes an expression in `handleExpr`. Note that this expression should be a side-effect and it wil not return anything! I'm not entirely sure what's the difference between `observe` and `observeEvent`.

`eventReactive` helps to delay execution.

```{r}
ui <- fluidPage(
  numericInput("numid", "Choose a number", value = 0),
  actionButton("button", "Print number!"),
  textOutput("number_is")
)

server <- function(input, output) {
  vals <- eventReactive(input$button, {input$numid})
  output$number_is <- renderText({
    paste("Woho! This is an eventReactive expression for number ", vals())
  })
}

shinyApp(ui = ui, server = server)
```

#### Difference between observeEvent and eventReactive

The main difference between `observeEvent` and `eventReactive` is that the first just waits until a trigger to execute a side efect (could be a script, calling a database, changing the value of a reactive value) and doesn't return anything (!) whereas the other allows to return a value, expression or whatever, based on a trigger. More usefully, you would use this to return a value whenever you click on a button, delaying it's execution until it's clicked.


Finally, sometimes you want to have reactive values before the user inputs, for that you can use `reactiveValues()`.

Example:

```{r}
valsnorm <- rnorm(10000)

ui <- fluidPage(
  sliderInput("nbins", "Choose # bins",
              min = 50,
              max = 150,
              value = 120),
  actionButton("mk_plt", "Make plot!"),
  plotOutput("hist")
)

server <- function(input, output) {
  new_vals <- reactiveValues(nbins = 100)
  
  observeEvent(input$mk_plt, {new_vals$nbins <- input$nbins})
  
  output$hist <- renderPlot({
    hist(valsnorm, breaks = new_vals$nbins, main = new_vals$nbins)
  })
}

shinyApp(ui = ui, server = server)
```


The workflow from before can be summarized here:

![](summary_shiny.jpg)

### Working with the User Interface (UI)

* `tags$p` - paragraph
* `tags$strong` - bold
* `tags$em` - italics
* `tags$hr` - horizontal rule
* `tags$a` - hyperlinks
* `tags$img` - src arg will look for an image.

Named arguments inside the `tags$*` function wil be used as attributes and unnamed arguments will be passed to the body of the tag. For example, `tags$a(href = "whatever.com", "My link")` will translate to `<a href = "whatever.com"> My link </a>`.

**To include images, create a folder `www` inside the shiny folder and images will be searched for there**

You can add html by quoting html as a string and wrapping it in `HTML()`.

You can position anything in your app with `fluidRow` and `columns` to insert rows, and insert columns within those rows

```{r}
library(shiny)

ui <- fluidPage(
  fluidRow(column(4, sliderInput("slid", label = "Slider", min = 10, max = 20, value = 5))),
  fluidRow(),
  fluidRow(column(12, offset = 3, plotOutput("scatter", width = "50%")))
)

server <- function(input, output, session) {
  output$scatter <- renderPlot(plot(rnorm(100), rnorm(100)))
}

shinyApp(ui, server)
```

`fluidRow` introduces 12 columns rows which you can add slides, plots, images, texts or anything controlling for the number of columns each object occupies. This is done using the `column` function from above. Note that the first argument of `columns` specifies the number of columns the object will occupy and `offset` will control where those 12 columns begin. 

With this two options you can control the position of your objects very much like a grid with an X axis and a Y axis.


#### Panels

* `wellPanel` wraps slides into a common background (grey)

* `tabsetPanel` to create the structure of N panels

  * `tabPanel` creates tabs that you can navigate. Inside each tab you can treat it as your own UI and use `fluidRows`, etc..

For example..

```{r}
library(shiny)

ui <- fluidPage(title = "Random generator",
  tabsetPanel(
    tabPanel(title = "Normal","whatever"),
    tabPanel(title = "Uniform","whatever"),
    tabPanel(title = "Chi Squared data","whatever")
  )
)

server <- function(input, output) {
  
}

shinyApp(server = server, ui = ui)
```

So `tabsetPanel` is like a navigation system and `tabPanel` shows each tab.

* `navlistPanel` is the same, but creates a sidebar list of panels.

```{r}

ui <- fluidPage(title = "Random generator",
  navlistPanel(
    tabPanel(title = "Normal","whatever"),
    tabPanel(title = "Uniform","whatever"),
    tabPanel(title = "Chi Squared data","whatever")
  )
)

server <- function(input, output) {
  
}

shinyApp(server = server, ui = ui)
```


There's pre packaged layouts. Here are examples:

**fluidPage is fluid because it auto scales when you change the size of your browser! For fixed size use fixedPage. An alternative is navBarPage**

```{r}
library(shiny)

ui <- fluidPage(
  sidebarLayout(
    sidebarPanel(actionButton("whatever", "Click me")),
    mainPanel(plotOutput("scatter"))
  )
)

server <- function(input, output, session) {
  output$scatter <- renderPlot(plot(rnorm(100), rnorm(100)))
}

shinyApp(ui, server)
```


```{r}
library(shiny)

ui <- navbarPage(title = "Random generator",
    tabPanel(title = "Normal data"),
    tabPanel(title = "Uniform data"),
    tabPanel(title = "Chi Squared data"))

server <- function(input, output) {
  
}

shinyApp(server = server, ui = ui)
```

Same as before, but regroup some panels into once drop down menu tab.

```{r}
# 06-navlist.R

library(shiny)

ui <- navbarPage(title = "Random generator",
  tabPanel(title = "Normal data"),
  navbarMenu(title = "Other data",
    tabPanel(title = "Uniform data"),
    tabPanel(title = "Chi Squared data")
  )
)

server <- function(input, output) {}

shinyApp(server = server, ui = ui)
```

### Style everything with CSS

Place all .css in `www`.

```{r, eval = FALSE}
library(shiny)

ui <- fluidPage(
  theme = "name_of_css.css inside `www`"
  # OR
  includeCSS("path to css")
  # OR write manually within tags
  tags$h1(style = "color:red")
)

server <- function(input, output, session) {
}

shinyApp(ui, server)
```

Still need to learn CSS. https://www.codecademy.com/en/tracks/web and when you know it, go to http://shiny.rstudio.com/articles/css.html
